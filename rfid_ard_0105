#include <SPI.h>
#include <MFRC522.h>
#define SS_PIN 10
#define RST_PIN 9
#define MAX_PEOPLE 40
int CNT = 0;
int POSS_PEOPLE = 0;
 
MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class

MFRC522::MIFARE_Key key; 

// Init array that will store new NUID 
byte nuidPICC[4];

void setup() { 
  Serial.begin(9600);
  SPI.begin(); // Init SPI bus
  rfid.PCD_Init(); // Init MFRC522 

  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  Serial.println("모듈 연결 완료.");
}
/*//MIFARE 타입의 카드키 종류들만 인식됨을 표시
  Serial.println(F("This code scan the MIFARE Classsic NUID."));
  Serial.print(F("Using the following key:"));
  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);
}*/
 
void loop() {

  // 새카드(새로운탑승자)의 접촉이 있을 때만 다음 단계로 넘어감
  if ( ! rfid.PICC_IsNewCardPresent())
    return;

  // 카드 읽힘을 성공하면 다음으로 넘어감
  if ( ! rfid.PICC_ReadCardSerial())
    return;
  //현재 접촉되는 카드 타입을 모니터에 표시
  Serial.print("카드 타입: ");
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  Serial.println(rfid.PICC_GetTypeName(piccType));

  // MIFARE 방식의 카드인지 확인
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  
    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&
    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
    Serial.println("인식할 수 없는 카드입니다.");
    return;
  }
  // 이전에 인식된 카드와 다르거나 새카드가 인식되면
  if (rfid.uid.uidByte[0] != nuidPICC[0] || 
    rfid.uid.uidByte[1] != nuidPICC[1] || 
    rfid.uid.uidByte[2] != nuidPICC[2] || 
    rfid.uid.uidByte[3] != nuidPICC[3] ) {
    Serial.println("탑승합니다.");
    CNT+=1;
    POSS_PEOPLE=MAX_PEOPLE-CNT;
    Serial.print("현재 잔여 좌석 수:");
    Serial.println(POSS_PEOPLE);
    
    // 고유아이디(UID) 값을 저장
    for (byte i = 0; i < 4; i++) {
      nuidPICC[i] = rfid.uid.uidByte[i];
    }
   // UID 값을 16진값과 10진값으로 출력
    Serial.println(F("The NUID tag is:"));
    Serial.print(F("In hex: "));
    printHex(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
    Serial.print(F("In dec: "));
    printDec(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
  }
  // 이전에 접촉했던 카드를 재접촉 시에
  else {Serial.println("하차합니다.");
   CNT-=1;
   POSS_PEOPLE=MAX_PEOPLE-CNT;
   Serial.print("현재 잔여 좌석 수:");
   Serial.println(POSS_PEOPLE);}

  // Halt PICC
  rfid.PICC_HaltA();

  // Stop encryption on PCD
  rfid.PCD_StopCrypto1();
}


//16진값으로 변환 해주는 함수 정의
void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}

//10진값으로 변환 해주는 함수 정의
void printDec(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], DEC);
  }
}
